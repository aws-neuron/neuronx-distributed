HloModule PyLoweringContext.22, entry_computation_layout={(f32[3,4]{1,0}, f32[4,2]{1,0}, f32[2,4]{1,0}, bf16[8,8,128,4,2,448]{5,4,3,2,1,0})->(f32[3,4]{1,0})}


%HloNkiKernelCallImpl.589 (p2.592: bf16[8,4096,2,448]) -> bf16[4097,4096] {
  %p2.592 = bf16[8,4096,2,448]{3,2,1,0} parameter(0)
  ROOT %custom-call.597 = bf16[4097,4096]{1,0} custom-call(bf16[8,4096,2,448]{3,2,1,0} %p2.592), custom_call_target="AwsNeuronCustomNativeKernel", api_version=API_VERSION_UNSPECIFIED, backend_config="<truncated>"
}

%NkiKernelCallImpl.598 (p2.601: bf16[8,4096,2,448]) -> bf16[4097,4096] {
  %p2.601 = bf16[8,4096,2,448]{3,2,1,0} parameter(0)
  ROOT %call.606 = bf16[4097,4096]{1,0} call(bf16[8,4096,2,448]{3,2,1,0} %p2.601), to_apply=%HloNkiKernelCallImpl.589
}

%AddComputation.14 (x.15: f32[], y.16: f32[]) -> f32[] {
  %x.15 = f32[] parameter(0)
  %y.16 = f32[] parameter(1)
  %call.606 = bf16[4097,4096]{1,0} call(f32[] %x.15), to_apply=%HloNkiKernelCallImpl.589
  ROOT %add.17 = f32[] add(f32[] %x.15, f32[] %y.16)
}

ENTRY %PyLoweringContext.22 (p0: f32[3,4], p1: f32[4,2], p2: f32[2,4], p3: bf16[8,8,128,4,2,448]) -> (f32[3,4]) {
  %p0 = f32[3,4]{1,0} parameter(0)
  %p2 = f32[2,4]{1,0} parameter(2)
  %transpose.5 = f32[4,2]{0,1} transpose(f32[2,4]{1,0} %p2), dimensions={1,0}
  %dot.7 = f32[3,2]{1,0} dot(f32[3,4]{1,0} %p0, f32[4,2]{0,1} %transpose.5), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %transpose.8 = f32[3,2]{1,0} transpose(f32[3,2]{1,0} %dot.7), dimensions={0,1}
  %p1 = f32[4,2]{1,0} parameter(1)
  %transpose.3 = f32[2,4]{0,1} transpose(f32[4,2]{1,0} %p1), dimensions={1,0}
  %dot.9 = f32[3,4]{1,0} dot(f32[3,2]{1,0} %transpose.8, f32[2,4]{0,1} %transpose.3), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %transpose.10 = f32[3,4]{1,0} transpose(f32[3,4]{1,0} %dot.9), dimensions={0,1}
  %xlaconst0 = f32[] constant(0)
  %tuple.11 = (f32[3,4]{1,0}, f32[]) tuple(f32[3,4]{1,0} %transpose.10, f32[] %xlaconst0)
  %get-tuple-element.12 = f32[3,4]{1,0} get-tuple-element((f32[3,4]{1,0}, f32[]) %tuple.11), index=0
  %get-tuple-element.13 = f32[] get-tuple-element((f32[3,4]{1,0}, f32[]) %tuple.11), index=1
  %all-reduce.18 = (f32[3,4]{1,0}, f32[]) all-reduce(f32[3,4]{1,0} %get-tuple-element.12, f32[] %get-tuple-element.13), replica_groups={{0,1}}, constrain_layout=true, to_apply=%AddComputation.14
  %get-tuple-element.19 = f32[3,4]{1,0} get-tuple-element((f32[3,4]{1,0}, f32[]) %all-reduce.18), index=0
  %p3 = bf16[8,8,128,4,2,448]{5,4,3,2,1,0} parameter(3)
  %transpose.6 = bf16[8,8,4,128,2,448]{5,4,3,2,1,0} transpose(bf16[8,8,128,4,2,448]{5,4,3,2,1,0} %p3), dimensions={0,1,3,2,4,5}
  %reshape.8 = bf16[8,4096,896]{2,1,0} reshape(bf16[8,8,4,128,2,448]{5,4,3,2,1,0} %transpose.6)
  %reshape.9 = bf16[8,4096,2,448]{3,2,1,0} reshape(bf16[8,4096,896]{2,1,0} %reshape.8)
  %call.607 = bf16[4097,4096]{1,0} call(bf16[8,4096,2,448]{3,2,1,0} %reshape.9), to_apply=%NkiKernelCallImpl.598
  ROOT %tuple.21 = (f32[3,4]{1,0}) tuple(f32[3,4]{1,0} %get-tuple-element.19)
}
